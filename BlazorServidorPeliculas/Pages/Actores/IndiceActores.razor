@page "/actores"
@inject RepositorioActores repositorio
@inject NavigationManager navigationManager
@inject IMostrarMensajes mostrarMensajes
@attribute [Authorize(Roles = "admin")]

<h3>Indice Actores</h3>

<div class="mb-3">
    <a href="actores/crear" class="btn btn-info">Crear actor</a>
</div>

<ListadoGenerico Listado="Actores">
    <HayRegistrosCompleto>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Nombre</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Actores!)
                {
                    <tr>
                        <td>
                            <a href="/actores/editar/@item.Id" class="btn btn-success">Editar</a>
                            <button class="btn btn-danger" @onclick=@(()=> Borrar(item))>
                                Borrar
                            </button>
                        </td>
                        <td>
                            @item.Nombre
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>


<Paginacion PaginaActual="paginaActual"
            PaginasTotales="paginasTotales"
            PaginaSeleccionada="PaginaSeleccionada"></Paginacion>



@code {
    public List<Actor>? Actores { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar(pagina);
    }

    protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }

    private async Task Cargar(int pagina = 1)
    {
        var Respuesta = await repositorio.Get(new DTOs.PaginacionDTO { pagina = pagina });
        Actores = Respuesta.Registros;
        paginasTotales = Respuesta.TotalPaginas;
    }

    private async Task Borrar(Actor actor)
    {
        await repositorio.Delete(actor.Id);
        await Cargar();

    }
}
