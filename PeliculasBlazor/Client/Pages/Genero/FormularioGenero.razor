@inject SweetAlertService swal

<NavigationLock OnBeforeInternalNavigation="ImpedirSalirPagActual" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Nombre:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Genero.Nombre"></InputText>
            <ValidationMessage For="@(()=>Genero.Nombre)" />
        </div>
    </div>
    <button class="btn btn-success" type="submit">GUARDAR CAMBIOS</button>
</EditForm>

@code {
    [Parameter]
    [EditorRequired]
    public Genero Genero { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new(Genero);
    }

    public bool FormularioPosteado { get; set; } = false;

    private async Task ImpedirSalirPagActual(LocationChangingContext context)
    {
        var formedit = editContext.IsModified();
        if (!formedit)
        {
            return;
        }

        if (FormularioPosteado)
        {
            return;
        }

        var resultado = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confimracion",
                Text = "¿Desea abandonar la pagina sin guardar cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (confirmado)
        {
            return;
        }

        context.PreventNavigation();
    }


}
